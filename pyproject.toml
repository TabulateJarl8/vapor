[tool.poetry]
name = "vapor-steam"
version = "1.5.8"
description = "TUI program to check the ProtonDB compatibility of all the games of a Steam user."
authors = ["TabulateJarl8 <tabulatejarl8@gmail.com>"]
license = "GPLv3"
readme = "README.md"
packages = [{ include = "vapor" }]
homepage = "https://tabulate.tech/software/vapor"
repository = "https://github.com/TabulateJarl8/vapor"
keywords = ["steam", "protondb", "compatibility", "textual", "tui"]
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Environment :: Console",
	"Intended Audience :: End Users/Desktop",
	"License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
	"Natural Language :: English",
	"Operating System :: OS Independent",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
	"Typing :: Typed",
]
include = [{ path = "tests", format = "sdist" }]

[tool.poetry.dependencies]
python = "^3.8.1"
textual = "^0.79.1"
aiohttp = "^3.9.5"
platformdirs = "^4.3.2"
typing-extensions = "^4.12.2"

[tool.poetry.scripts]
vapor = "vapor.__main__:main"

[tool.poetry.group.dev.dependencies]
textual-dev = "^1.6.1"
ruff = "^0.6.4"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.pyright]
reportUnusedCallResult = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_also = [
	# Don't complain about missing debug-only code:
	"def __repr__",
	"if self\\.debug",

	# Don't complain if tests don't hit defensive assertion code:
	"raise AssertionError",
	"raise NotImplementedError",

	# Don't complain if non-runnable code isn't run:
	"if 0:",
	"if __name__ == .__main__.:",

	# Don't complain about abstract methods, they aren't run:
	"@(abc\\.)?abstractmethod",

	# dont test functions that only make network calls
	"async def async_get",
	"async def get_anti_cheat_data",
	"async def get_game_average_rating",
	"async def resolve_vanity_name",
	"async def get_steam_user_data",

	# dont test status checking
	"if data.status != 200",

]

omit = ["*/__main__.py"]


[tool.ruff.lint]
preview = true
extend-select = [
	# pycodestyle
	"E",
	# Warnings
	"W",
	# Pyflakes
	"F",
	# pydocstyle
	"D",
	# pyupgrade
	"UP",
	# flake8-bugbear
	"B",
	# flake8-simplify
	"SIM",
	# isort
	"I",
	# pep8-naming
	"N",
	# flake8-bandit
	"S",
	# flake8-boolean-trap
	"FBT",
	# flake8-comprehensions
	"C4",
	# flake8-pie
	"PIE",
	# quote rules
	"Q001",
	"Q002",
	# flake8-raise
	"RSE",
	# flake8-return
	"RET",
	# flake8-unused-arguments
	"ARG",
	# flake8-use-pathlib
	"PTH",
	# eradicate
	"ERA",
	# perflint
	"PERF",
	# flake8-2020
	"YTT",
	# flake8-annotations
	"ANN",
	# flake8-async
	"ASYNC",
	# flake8-builtins
	"A",
	# flake8-commas
	"COM",
	# flake8-implicit-str-concat
	"ISC",
	# flake8-print
	"T20",
	# flake8-pytest-style
	"PT",
	# flake8-use-pathlib
	"PTH",
	# pylint
	"PL",
	# tryceratops
	"TRY",
	# refurb
	"FURB",
	# pydoclint
	"DOC",
	# ruff rules
	"RUF",
]

ignore = [
	# complains about tab indentation
	"W191",
	"D206",
	# adds a line break before a class docstring
	"D203",
	# puts the first line summary of a docstring on a different line than the """
	"D213",
	# tries to add a blank line after the last docstring section
	"D413",
	# yells at you if you use a bool typed function argument
	"FBT001",
	"FBT002",
	# yells at you for using try-except in a for loop
	"PERF203",
	# allow for the use of Any
	"ANN401",
	# false positives for overriding methods (i think)
	"PLR6301",
	# disable too many branches check
	"PLR0912",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN001", "ANN002", "PLC2701", "ARG002", "PLR2004", "DOC"]
"vapor/main.py" = ["DOC402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "single"
indent-style = "tab"
line-ending = "lf"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
order-by-type = true
